L := ToricLattice(10);
M := DiagonalMatrix([1,-1,-1,-1,-1,-1,-1,-1,-1,-1]);
K := L![-3,1,1,1,1,1,1,1,1,1];

//

G1 := [0,-1,1,0,0,0,0,0,0,0];
G2 := [0,0,-1,1,0,0,0,0,0,0];
G3 := [0,0,0,-1,1,0,0,0,0,0];
G4 := [0,0,0,0,-1,1,0,0,0,0];
G5 := [0,0,0,0,0,-1,1,0,0,0];

L1 := [1,0,0,0,-1,-1,-1,0,0,0];
L2 := [1,0,0,0,0,0,-1,-1,-1,0];

C1 := [3,-1,-1,-1,-1,-1,-1,0,-2,-1];
C2 := [3,-1,-1,-1,-1,-1,-1,-2,0,-1];

D  := [3,0,-1,-1,-1,-1,-1,-1,-1,-2];



R :=[G1,G2,G3,G4,G5,L1,L2,D,C1,C2];

//

Rv := [L!(Eltseq(Matrix(1,10,Eltseq(r))*M)): r in R];
Kv := L!(Eltseq(Matrix(1,10,Eltseq(K))*M));
P := &meet[HalfspaceToPolyhedron(Rv[i],0) : i in [1..#Rv]] meet HyperplaneToPolyhedron(-Kv,1);
pts :=  SetToSequence(Points(CompactPart(P)));
S := [L!p+(qua(p,p,M)+1)/2*K: p in pts];


NegEx4 := [L!r : r in R] cat S;

H := HNef(NegEx4);

//

PND:=Seqset(H); 


X:=[];
for A in PND do
if #Test1(A,NegEx4,M,H) ge 1 then X:= X cat [A];  
end if;
end for;

X1:=PND diff Set(X);   

